{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/susannahbennett/Dasher/dasher-app/src/LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport { useForm, Controller } from 'react-hook-form';\nimport React, { useEffect, useState, Component } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport car from \"./assets/car3.png\";\nexport function LoginScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useForm = useForm({\n    criteriaMode: 'all'\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      setError = _useForm.setError,\n      errors = _useForm.errors;\n\n  var usernameInputRef = React.useRef();\n  var passwordInputRef = React.useRef();\n\n  var onSubmit = function onSubmit(data) {\n    var json, username, password, user, response;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            json = JSON.parse(JSON.stringify(data));\n            username = json[\"username\"];\n            password = json[\"password\"];\n            user = {\n              username: username,\n              password: password\n            };\n            console.log(JSON.stringify(user));\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:5000/login\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"accepts\": \"application/json\"\n              },\n              body: JSON.stringify(user)\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return data;\n            }));\n\n          case 7:\n            response = _context.sent;\n            console.log(response.message);\n\n            if (response.message == \"login successful\") {\n              navigation.navigate('Main');\n            } else {\n              alert(\"Login invalid\");\n            }\n\n            console.log(response);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var signup = function signup() {\n    navigation.navigate('Signup');\n  };\n\n  var onError = function onError(errors, e) {\n    return console.log(errors, e);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    source: car,\n    style: {\n      width: 150,\n      height: 70,\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Welcome!\"), React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Username\"), React.createElement(Controller, {\n    name: \"username\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        autoCapitalize: \"none\",\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: usernameInputRef,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"Password\"), React.createElement(Controller, {\n    name: \"password\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        secureTextEntry: true,\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: passwordInputRef,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: handleSubmit(onSubmit, onError),\n    style: styles.buttonSpecial,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Log In\"))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \" \"), React.createElement(TouchableOpacity, {\n    onPress: signup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonWhiteText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, \"New to Dasher? Create an account\"))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#66cc99',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    color: 'black',\n    fontSize: 20,\n    marginHorizontal: 10,\n    marginVertical: 10,\n    borderRadius: 10\n  },\n  buttonSpecial: {\n    backgroundColor: 'white',\n    color: 'white',\n    fontSize: 20,\n    marginHorizontal: 10,\n    marginVertical: 15,\n    borderColor: 'black',\n    borderWidth: 1,\n    paddingHorizontal: 5,\n    borderRadius: 7\n  },\n  buttonWhiteText: {\n    color: 'white',\n    fontSize: 20,\n    marginHorizontal: 10,\n    marginVertical: 10,\n    borderRadius: 5\n  },\n  textbox: {\n    backgroundColor: 'rgba(255,255,255,.5)',\n    height: 40,\n    width: 200,\n    marginTop: 10,\n    marginBottom: 20,\n    borderRadius: 5,\n    borderColor: 'white',\n    borderWidth: 1,\n    padding: 5\n  },\n  title: {\n    color: 'black',\n    fontSize: 30,\n    marginHorizontal: 15,\n    marginVertical: 15,\n    padding: 7,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  }\n});","map":{"version":3,"sources":["/Users/susannahbennett/Dasher/dasher-app/src/LoginScreen.js"],"names":["useForm","Controller","React","useEffect","useState","Component","car","LoginScreen","navigation","criteriaMode","control","handleSubmit","setError","errors","usernameInputRef","useRef","passwordInputRef","onSubmit","data","json","JSON","parse","stringify","username","password","user","console","log","fetch","method","headers","body","then","response","message","navigate","alert","signup","onError","e","styles","container","width","height","marginTop","title","label","required","props","textbox","value","onChange","buttonSpecial","button","buttonWhiteText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","color","fontSize","marginHorizontal","marginVertical","borderRadius","borderColor","borderWidth","paddingHorizontal","marginBottom","padding"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler'\nimport { useForm, Controller } from 'react-hook-form'\nimport React, { useEffect, useState, Component } from 'react'\nimport { Image, StyleSheet, Button, Text, View, Alert, TextInput, TouchableOpacity, StatusBar, Platform,} from 'react-native'\nimport car from './assets/car3.png';\n// import * as SplashScreen from 'expo-splash-screen';\n// import * as Font from 'expo-font';\n\n// Login screen\nexport function LoginScreen ({ navigation }) {\n\n    // useForm allows us to validate inputs and build forms\n    const {control, handleSubmit, setError, errors} = useForm( { criteriaMode: 'all' })\n    const usernameInputRef = React.useRef()\n    const passwordInputRef = React.useRef()\n  \n    const onSubmit = async (data) => { \n      // Once handleSubmit validates the inputs in onPress in button, this code is executed\n      const json = JSON.parse(JSON.stringify(data))\n      const username = json[\"username\"]\n      const password = json[\"password\"]\n      const user = {username, password}\n      console.log(JSON.stringify(user))\n      const response = await fetch(\"http://localhost:5000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"accepts\":\"application/json\"\n        },\n        body: JSON.stringify(user)\n      }).then((response) => response.json())\n      .then(data => {\n          return data;\n      });\n      console.log(response.message)\n      if (response.message == \"login successful\") {\n        navigation.navigate('Main');\n      } else {\n        //Display message\n        alert(`Login invalid`)\n      }\n      console.log(response)\n      \n    }\n    const signup = () => {\n      navigation.navigate('Signup');\n    }\n  \n    const onError = (errors, e) => console.log(errors, e)\n    /** \n    useEffect(() => {\n      async function prepare() {\n        try {\n          // Keep the splash screen visible while we fetch resources\n          await SplashScreen.preventAutoHideAsync();\n          // Artifically delayed by 2 seconds\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          // Tell the application to render\n          setAppIsReady(true);\n        }\n      }\n      prepare();\n    }, []);\n  \n    const onLayoutRootView = useCallback(async () => {\n      if (appIsReady) {\n        await SplashScreen.hideAsync();\n      }\n    }, [appIsReady]);\n  \n    if (!appIsReady) {\n      return null;\n    }\n    */\n  \n    return (\n      <View style={styles.container}>\n        <Image source={car} style={{ width: 150, height: 70, marginTop: 10}} /> \n\n        <View>\n          <Text style={styles.title}>Welcome!</Text>\n          <Text style={styles.label}>Username</Text>\n          <Controller \n            name=\"username\" \n            control={control} \n            rules= {{required: 'This is required'}}\n            defaultValue=''\n            render={(props) => \n              <TextInput {...props} \n              //I know the following line sometimes gives a warning.\n                //Please leave it in place, otherwise the forms are hard to work with\n                autoCapitalize=\"none\"\n                style={styles.textbox}\n                onChangeText={(value) => {\n                  props.onChange(value)\n                }}\n                ref={usernameInputRef}\n              />\n            }\n          />\n        </View>\n        <View>\n          <Text style={styles.label}>Password</Text>\n          <Controller \n            name=\"password\" \n            control={control} \n            rules= {{required: 'This is required'}}\n            defaultValue=''\n            render={(props) => \n              <TextInput {...props} \n                secureTextEntry={true}\n                style={styles.textbox}\n                onChangeText={(value) => {\n                  props.onChange(value)\n                }}\n                ref={passwordInputRef}\n              />\n            }\n          />\n        </View>\n        <View>\n          <TouchableOpacity \n            // handleSubmit validates inputs before calling onSubmit\n            onPress={handleSubmit(onSubmit, onError)}\n            // onPress={() => navigation.navigate('Main')}\n            style={styles.buttonSpecial}>\n            <Text style={styles.button}>Log In</Text>    \n          </TouchableOpacity>\n        </View>\n        <View>\n          <Text style={styles.label}> </Text>\n          <TouchableOpacity onPress={signup}>\n            <Text style={styles.buttonWhiteText}>New to Dasher? Create an account</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    )\n  }\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#66cc99',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    button: {\n        color: 'black',\n        fontSize: 20,\n        marginHorizontal: 10,\n        marginVertical: 10,\n        borderRadius: 10\n    },\n    buttonSpecial: { //Currently identical to buttonBasic\n        //backgroundColor: '#8ebce7',\n        //backgroundColor: '#94bfe7',\n        //backgroundColor: '#072A42',\n        backgroundColor: 'white',\n        color: 'white',\n        fontSize: 20,\n        marginHorizontal: 10,\n        marginVertical: 15,\n        borderColor: 'black',\n          borderWidth: 1,\n        paddingHorizontal: 5,\n        borderRadius: 7\n    },\n    buttonWhiteText: {\n        color: 'white',\n        fontSize: 20,\n        marginHorizontal: 10,\n        marginVertical: 10,\n        borderRadius: 5\n    },\n    textbox: {\n        backgroundColor: 'rgba(255,255,255,.5)',\n          height: 40,\n          width: 200,\n          marginTop: 10,\n          marginBottom: 20,\n          borderRadius: 5,\n          borderColor: 'white',\n          borderWidth: 1,\n          padding: 5\n    },\n    title: {\n        color: 'black',\n        fontSize: 30,\n        // backgroundColor: 'white',\n        marginHorizontal: 15,\n        marginVertical: 15,\n        padding: 7,\n        paddingHorizontal: 20,\n        borderRadius: 5\n    },\n})"]},"metadata":{},"sourceType":"module"}