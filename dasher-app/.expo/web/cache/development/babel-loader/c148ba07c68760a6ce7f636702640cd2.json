{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/susannahbennett/Dasher/dasher-app/src/CommentsScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport { useForm, Controller } from 'react-hook-form';\nimport React, { useEffect, useState, Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nexport function CommentsScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      exampleState = _useState2[0],\n      setExampleState = _useState2[1];\n\n  useEffect(function () {\n    function fetchData() {\n      var response, list;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:5000/get_comments\", {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              }).then(function (response) {\n                return response.json();\n              }));\n\n            case 2:\n              response = _context.sent;\n              list = response.comments;\n              console.log(list);\n              setExampleState(list);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, React.createElement(FlatList, {\n    keyExtractor: function keyExtractor(item) {\n      return item.comment_id.toString();\n    },\n    data: exampleState,\n    renderItem: function renderItem(item) {\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('Main');\n        },\n        style: styles.textbox,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.restaurant,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }\n      }, item.item.restaurant_name), React.createElement(Text, {\n        style: styles.comment,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }\n      }, item.item.comment));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Add comment\",\n    style: styles.button,\n    onPress: navigation.navigate('SaveDrive'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: 'black',\n    color: 'white'\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#66cc99',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  scrollView: {\n    backgroundColor: 'white',\n    marginHorizontal: 20\n  },\n  textbox: {\n    backgroundColor: 'rgba(255,255,255,.5)',\n    height: 60,\n    width: 300,\n    marginTop: 10,\n    borderRadius: 5,\n    borderColor: 'white',\n    borderWidth: 1,\n    padding: 5\n  },\n  title: {\n    color: 'black',\n    fontSize: 30,\n    marginHorizontal: 15,\n    marginVertical: 15,\n    padding: 7,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  },\n  restaurant: {\n    fontSize: 14,\n    color: 'black',\n    fontWeight: 'bold'\n  },\n  comment: {\n    fontSize: 12,\n    color: 'black'\n  }\n});","map":{"version":3,"sources":["/Users/susannahbennett/Dasher/dasher-app/src/CommentsScreen.js"],"names":["useForm","Controller","React","useEffect","useState","Component","CommentsScreen","navigation","exampleState","setExampleState","fetchData","fetch","method","headers","then","response","json","list","comments","console","log","styles","container","item","comment_id","toString","navigate","textbox","restaurant","restaurant_name","comment","button","StyleSheet","create","backgroundColor","color","flex","alignItems","justifyContent","scrollView","marginHorizontal","height","width","marginTop","borderRadius","borderColor","borderWidth","padding","title","fontSize","marginVertical","paddingHorizontal","fontWeight"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler'\nimport { useForm, Controller } from 'react-hook-form'\nimport React, { useEffect, useState, Component } from 'react'\nimport { StyleSheet, Button, Text, View, Alert, TextInput, TouchableOpacity, FlatList} from 'react-native'\n\nexport function CommentsScreen ({ navigation }) {\n  const [exampleState, setExampleState] = useState({})\n\n    useEffect ( () => {\n      async function fetchData() {\n        const response = await fetch(\"http://localhost:5000/get_comments\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then((response) => response.json())\n        const list = response.comments // an array of comments (restaurant name and comment)\n        console.log(list)\n\n        setExampleState(list)\n      }\n      fetchData();\n    }, [])\n    // if the text is longer than what can be displayed, cut it short with ...\n    \n    return (\n      <View style={styles.container}>\n      <FlatList\n          keyExtractor = {item => item.comment_id.toString()}  \n          data={exampleState}\n          renderItem = {item => (\n            <TouchableOpacity \n              onPress={() => navigation.navigate('Main')}\n              style={styles.textbox}\n            >\n              <Text style={styles.restaurant}>{item.item.restaurant_name}</Text>\n              <Text style={styles.comment}>{item.item.comment}</Text>\n            </TouchableOpacity>\n            )} />\n      <Button\n       title=\"Add comment\"\n       style={styles.button}\n       onPress={navigation.navigate('SaveDrive')}\n      />\n      </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: 'black',\n    color: 'white'\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#66cc99',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  scrollView: {\n    backgroundColor: 'white',\n    marginHorizontal: 20,\n  },\n  textbox: {\n    backgroundColor: 'rgba(255,255,255,.5)',\n      height: 60,\n      width: 300,\n      marginTop: 10,\n      // marginBottom: 5,\n      borderRadius: 5,\n      borderColor: 'white',\n      borderWidth: 1,\n      padding: 5\n},\n  title: {\n      color: 'black',\n      fontSize: 30,\n      // backgroundColor: 'white',\n      marginHorizontal: 15,\n      marginVertical: 15,\n      padding: 7,\n      paddingHorizontal: 20,\n      borderRadius: 5\n  },\n  restaurant: {\n    fontSize: 14,\n    color: 'black',\n    fontWeight: 'bold'\n  },\n  comment: {\n    fontSize: 12,\n    color: 'black'\n  }\n})"]},"metadata":{},"sourceType":"module"}