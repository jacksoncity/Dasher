{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/susannahbennett/Dasher/dasher-app/src/SaveDriveScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport { useForm, Controller } from 'react-hook-form';\nimport React, { useEffect, useState, Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nexport function SaveDriveScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useForm = useForm({\n    criteriaMode: 'all'\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      setError = _useForm.setError,\n      errors = _useForm.errors;\n\n  var commentText = React.useRef();\n  var restaurantInputRef = React.useRef();\n\n  var saveComments = function saveComments(data) {\n    var comm;\n    return _regeneratorRuntime.async(function saveComments$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            comm = {\n              \"restaurant_name\": restaurantInputRef,\n              \"comment\": commentText\n            };\n            console.log(comm);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, \"Add Comments\"), React.createElement(Text, {\n    style: {\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Restaurant Name\"), React.createElement(Controller, {\n    name: \"restaurant_name\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: restaurantInputRef,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: {\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Comments\"), React.createElement(Controller, {\n    name: \"comment\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        style: styles.commentsBox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        multiline: true,\n        ref: commentText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: handleSubmit(saveComments),\n    style: {\n      backgroundColor: 'white',\n      marginHorizontal: 5,\n      marginVertical: 10,\n      paddingHorizontal: 5,\n      borderWidth: 1,\n      borderRadius: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 20,\n      marginHorizontal: 10,\n      marginVertical: 10,\n      paddingHorizontal: 5,\n      color: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Save\")));\n}\nvar styles = StyleSheet.create({\n  commentsBox: {\n    backgroundColor: 'rgba(255,255,255,.5)',\n    height: 150,\n    width: 200,\n    marginTop: 10,\n    marginBottom: 20,\n    borderRadius: 5,\n    borderColor: 'white',\n    borderWidth: 1,\n    flexWrap: 'wrap',\n    overflow: 'scroll',\n    padding: 5\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#66cc99',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textbox: {\n    backgroundColor: 'rgba(255,255,255,.5)',\n    height: 40,\n    width: 200,\n    marginTop: 10,\n    marginBottom: 20,\n    borderRadius: 5,\n    borderColor: 'white',\n    borderWidth: 1,\n    padding: 5\n  },\n  title: {\n    color: 'black',\n    fontSize: 30,\n    marginHorizontal: 15,\n    marginVertical: 15,\n    padding: 7,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  }\n});","map":{"version":3,"sources":["/Users/susannahbennett/Dasher/dasher-app/src/SaveDriveScreen.js"],"names":["useForm","Controller","React","useEffect","useState","Component","SaveDriveScreen","navigation","criteriaMode","control","handleSubmit","setError","errors","commentText","useRef","restaurantInputRef","saveComments","data","comm","console","log","styles","container","title","textAlign","required","props","textbox","value","onChange","commentsBox","backgroundColor","marginHorizontal","marginVertical","paddingHorizontal","borderWidth","borderRadius","fontSize","color","StyleSheet","create","height","width","marginTop","marginBottom","borderColor","flexWrap","overflow","padding","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler'\nimport { useForm, Controller } from 'react-hook-form'\nimport React, { useEffect, useState, Component } from 'react'\nimport { StyleSheet, Text, View, TextInput, TouchableOpacity } from 'react-native'\n\nexport function SaveDriveScreen ({ navigation }) {\n    const {control, handleSubmit, setError, errors} = useForm( { criteriaMode: 'all' })\n    const commentText = React.useRef()\n    const restaurantInputRef = React.useRef()\n  \n    const saveComments = async (data) => {\n      // call save comments api here\n      // const json = JSON.parse(JSON.stringify(data))\n      //const json = JSON.stringify(data)\n      // console.log(json)\n      //const restaurant_name = json[\"restaurant_name\"]\n      // const comment = json[\"comment\"]\n      const comm = {\"restaurant_name\": restaurantInputRef, \"comment\": commentText}\n      console.log(comm)\n      /**\n      const response = await fetch(\"http://localhost:5000/add_comment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(comm)\n      })\n  \n      console.log(response);\n      */\n  \n      // alert('Comments successfully saved!')\n      // navigation.navigate('Main')\n    }\n  \n    return (\n      <View style={styles.container}>\n        <Text style={styles.title}>Add Comments</Text>\n        <Text style={{textAlign: 'left'}}>Restaurant Name</Text>\n        <Controller \n          name=\"restaurant_name\" \n          control={control} \n          rules= {{required: 'This is required'}}\n          defaultValue=''\n          render={(props) => \n            <TextInput {...props} \n              style={styles.textbox}\n              onChangeText={(value) => {\n                props.onChange(value)\n              }} \n              ref={restaurantInputRef}\n            />\n          }/>\n        <Text style={{textAlign: 'left'}}>Comments</Text>\n        <Controller \n          name=\"comment\" \n          control={control} \n          rules= {{required: 'This is required'}}\n          defaultValue=''\n          render={(props) => \n            <TextInput {...props} \n              style={styles.commentsBox}\n              // placeholder={\"Add comments about the restaurant here!\"}\n              onChangeText={(value) => {\n                props.onChange(value)\n              }} \n              multiline={true}\n              ref={commentText}\n            />\n          }/>\n        <TouchableOpacity onPress={handleSubmit(saveComments)} style={{backgroundColor: 'white', marginHorizontal: 5, marginVertical: 10, paddingHorizontal: 5, borderWidth: 1, borderRadius: 20}}>\n          <Text style={{fontSize: 20, marginHorizontal: 10, marginVertical: 10, paddingHorizontal: 5, color: 'black'}}>Save</Text>\n        </TouchableOpacity> \n      </View>\n    )\n  }\n\n\nconst styles = StyleSheet.create({\n    commentsBox: {\n        backgroundColor: 'rgba(255,255,255,.5)',\n        height: 150,\n        width: 200,\n        marginTop: 10,\n        marginBottom: 20,\n        borderRadius: 5,\n        borderColor: 'white',\n        borderWidth: 1,\n  \n        flexWrap: 'wrap',\n        overflow: 'scroll',\n        padding: 5\n    },\n    container: {\n      flex: 1,\n      backgroundColor: '#66cc99',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    textbox: {\n        backgroundColor: 'rgba(255,255,255,.5)',\n          height: 40,\n          width: 200,\n          marginTop: 10,\n          marginBottom: 20,\n          borderRadius: 5,\n          borderColor: 'white',\n          borderWidth: 1,\n          padding: 5\n    },\n    title: {\n        color: 'black',\n        fontSize: 30,\n        // backgroundColor: 'white',\n        marginHorizontal: 15,\n        marginVertical: 15,\n        padding: 7,\n        paddingHorizontal: 20,\n        borderRadius: 5\n    },\n})"]},"metadata":{},"sourceType":"module"}