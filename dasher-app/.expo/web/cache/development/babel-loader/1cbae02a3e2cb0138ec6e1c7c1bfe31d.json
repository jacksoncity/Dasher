{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/susannahbennett/Dasher/dasher-app/src/SignupScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport { useForm, Controller } from 'react-hook-form';\nimport React, { useEffect, useState, Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nexport function SignupScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useForm = useForm({\n    criteriaMode: 'all'\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      setError = _useForm.setError,\n      errors = _useForm.errors;\n\n  var usernameInputRef = React.useRef();\n  var passwordInputRef = React.useRef();\n  var emailInputRef = React.useRef();\n\n  var onSubmit = function onSubmit(data) {\n    var json, username, password, email, newUser, response;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            json = JSON.parse(JSON.stringify(data));\n            username = json[\"username\"];\n            password = json[\"password\"];\n            email = json[\"email\"];\n            newUser = {\n              username: username,\n              password: password,\n              email: email\n            };\n            console.log(JSON.stringify(newUser));\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:5000/signup\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(newUser)\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return data;\n            }));\n\n          case 8:\n            response = _context.sent;\n\n            if (response.message == \"user created\") {\n              navigation.navigate('Login');\n              alert(\"Account created! Please sign in\");\n            } else {\n              alert(\"A problem occurred. Please try again\");\n            }\n\n            console.log(response);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onError = function onError(errors, e) {\n    return console.log(errors, e);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Create Account\"), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"Username\"), React.createElement(Controller, {\n    name: \"username\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        autoCapitalize: \"none\",\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: usernameInputRef,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Password\"), React.createElement(Controller, {\n    name: \"password\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        secureTextEntry: true,\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: passwordInputRef,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"Email\"), React.createElement(Controller, {\n    name: \"email\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        autoCapitalize: \"none\",\n        secureTextEntry: false,\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: emailInputRef,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: handleSubmit(onSubmit, onError),\n    style: styles.buttonSpecial,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Sign up\"))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#66cc99',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    color: 'black',\n    fontSize: 20,\n    marginHorizontal: 10,\n    marginVertical: 10,\n    borderRadius: 10\n  },\n  buttonSpecial: {\n    backgroundColor: 'white',\n    color: 'white',\n    fontSize: 20,\n    marginHorizontal: 10,\n    marginVertical: 15,\n    borderColor: 'black',\n    borderWidth: 1,\n    paddingHorizontal: 5,\n    borderRadius: 7\n  },\n  buttonWhiteText: {\n    color: 'white',\n    fontSize: 20,\n    marginHorizontal: 10,\n    marginVertical: 10,\n    borderRadius: 5\n  },\n  textbox: {\n    backgroundColor: 'rgba(255,255,255,.5)',\n    height: 40,\n    width: 200,\n    marginTop: 10,\n    marginBottom: 20,\n    borderRadius: 5,\n    borderColor: 'white',\n    borderWidth: 1,\n    padding: 5\n  },\n  title: {\n    color: 'black',\n    fontSize: 30,\n    marginHorizontal: 15,\n    marginVertical: 15,\n    padding: 7,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  }\n});","map":{"version":3,"sources":["/Users/susannahbennett/Dasher/dasher-app/src/SignupScreen.js"],"names":["useForm","Controller","React","useEffect","useState","Component","SignupScreen","navigation","criteriaMode","control","handleSubmit","setError","errors","usernameInputRef","useRef","passwordInputRef","emailInputRef","onSubmit","data","json","JSON","parse","stringify","username","password","email","newUser","console","log","fetch","method","headers","body","then","response","message","navigate","alert","onError","e","styles","container","title","label","required","props","textbox","value","onChange","buttonSpecial","button","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","color","fontSize","marginHorizontal","marginVertical","borderRadius","borderColor","borderWidth","paddingHorizontal","buttonWhiteText","height","width","marginTop","marginBottom","padding"],"mappings":";;;AAAA,OAAO,8BAAP;AACA,SAASA,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;;;;;;;;;AAIA,OAAO,SAASC,YAAT,OAAuC;AAAA;;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,iBAEQP,OAAO,CAAE;AAAEQ,IAAAA,YAAY,EAAE;AAAhB,GAAF,CAFf;AAAA,MAEnCC,OAFmC,YAEnCA,OAFmC;AAAA,MAE1BC,YAF0B,YAE1BA,YAF0B;AAAA,MAEZC,QAFY,YAEZA,QAFY;AAAA,MAEFC,MAFE,YAEFA,MAFE;;AAG1C,MAAMC,gBAAgB,GAAGX,KAAK,CAACY,MAAN,EAAzB;AACA,MAAMC,gBAAgB,GAAGb,KAAK,CAACY,MAAN,EAAzB;AACA,MAAME,aAAa,GAAGd,KAAK,CAACY,MAAN,EAAtB;;AAEA,MAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAETC,YAAAA,IAFS,GAEFC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,IAAf,CAAX,CAFE;AAGTK,YAAAA,QAHS,GAGEJ,IAAI,CAAC,UAAD,CAHN;AAITK,YAAAA,QAJS,GAIEL,IAAI,CAAC,UAAD,CAJN;AAKTM,YAAAA,KALS,GAKDN,IAAI,CAAC,OAAD,CALH;AAMTO,YAAAA,OANS,GAMC;AAACH,cAAAA,QAAQ,EAARA,QAAD;AAAWC,cAAAA,QAAQ,EAARA,QAAX;AAAqBC,cAAAA,KAAK,EAALA;AAArB,aAND;AAOfE,YAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACE,SAAL,CAAeI,OAAf,CAAZ;AAPe;AAAA,6CAQQG,KAAK,CAAC,8BAAD,EAAiC;AAC7DC,cAAAA,MAAM,EAAE,MADqD;AAE7DC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFoD;AAK7DC,cAAAA,IAAI,EAAEZ,IAAI,CAACE,SAAL,CAAeI,OAAf;AALuD,aAAjC,CAAL,CAMtBO,IANsB,CAMjB,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACf,IAAT,EAAd;AAAA,aANiB,EAOxBc,IAPwB,CAOnB,UAAAf,IAAI,EAAI;AACV,qBAAOA,IAAP;AACH,aATwB,CARR;;AAAA;AAQTgB,YAAAA,QARS;;AAkBjB,gBAAIA,QAAQ,CAACC,OAAT,IAAoB,cAAxB,EAAwC;AACtC5B,cAAAA,UAAU,CAAC6B,QAAX,CAAoB,OAApB;AACAC,cAAAA,KAAK,mCAAL;AAED,aAJD,MAIO;AACLA,cAAAA,KAAK,wCAAL;AACD;;AACDV,YAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;;AAzBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AA6BF,MAAMI,OAAO,GAAG,SAAVA,OAAU,CAAC1B,MAAD,EAAS2B,CAAT;AAAA,WAAeZ,OAAO,CAACC,GAAR,CAAYhB,MAAZ,EAAoB2B,CAApB,CAAf;AAAA,GAAhB;;AAEE,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,OAAO,EAAElC,OAFX;AAGE,IAAA,KAAK,EAAG;AAACmC,MAAAA,QAAQ,EAAE;AAAX,KAHV;AAIE,IAAA,YAAY,EAAC,EAJf;AAKE,IAAA,MAAM,EAAE,gBAACC,KAAD;AAAA,aACN,oBAAC,SAAD,eAAeA,KAAf;AACE,QAAA,cAAc,EAAC,MADjB;AAEE,QAAA,KAAK,EAAEL,MAAM,CAACM,OAFhB;AAGE,QAAA,YAAY,EAAE,sBAACC,KAAD,EAAW;AACvBF,UAAAA,KAAK,CAACG,QAAN,CAAeD,KAAf;AACD,SALH;AAME,QAAA,GAAG,EAAElC,gBANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADM;AAAA,KALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAHF,EAsBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE2B,MAAM,CAACG,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,OAAO,EAAElC,OAFX;AAGE,IAAA,KAAK,EAAG;AAACmC,MAAAA,QAAQ,EAAE;AAAX,KAHV;AAIE,IAAA,YAAY,EAAC,EAJf;AAKE,IAAA,MAAM,EAAE,gBAACC,KAAD;AAAA,aACN,oBAAC,SAAD,eAAeA,KAAf;AACE,QAAA,eAAe,EAAE,IADnB;AAEE,QAAA,KAAK,EAAEL,MAAM,CAACM,OAFhB;AAGE,QAAA,YAAY,EAAE,sBAACC,KAAD,EAAW;AACvBF,UAAAA,KAAK,CAACG,QAAN,CAAeD,KAAf;AACD,SALH;AAME,QAAA,GAAG,EAAEhC,gBANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADM;AAAA,KALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAtBF,EAyCE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEyB,MAAM,CAACG,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,OAAO,EAAElC,OAFX;AAGE,IAAA,KAAK,EAAG;AAACmC,MAAAA,QAAQ,EAAE;AAAX,KAHV;AAIE,IAAA,YAAY,EAAC,EAJf;AAKE,IAAA,MAAM,EAAE,gBAACC,KAAD;AAAA,aACN,oBAAC,SAAD,eAAeA,KAAf;AACE,QAAA,cAAc,EAAC,MADjB;AAEE,QAAA,eAAe,EAAE,KAFnB;AAGE,QAAA,KAAK,EAAEL,MAAM,CAACM,OAHhB;AAIE,QAAA,YAAY,EAAE,sBAACC,KAAD,EAAW;AACvBF,UAAAA,KAAK,CAACG,QAAN,CAAeD,KAAf;AACD,SANH;AAOE,QAAA,GAAG,EAAE/B,aAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADM;AAAA,KALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAzCF,EA6DE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAEE,IAAA,OAAO,EAAEN,YAAY,CAACO,QAAD,EAAWqB,OAAX,CAFvB;AAIE,IAAA,KAAK,EAAEE,MAAM,CAACS,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET,MAAM,CAACU,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CADF,CA7DF,CADF;AAyED;AAED,IAAMV,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;AAC/BX,EAAAA,SAAS,EAAE;AACTY,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BN,EAAAA,MAAM,EAAE;AACJO,IAAAA,KAAK,EAAE,OADH;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJC,IAAAA,gBAAgB,EAAE,EAHd;AAIJC,IAAAA,cAAc,EAAE,EAJZ;AAKJC,IAAAA,YAAY,EAAE;AALV,GAPuB;AAc/BZ,EAAAA,aAAa,EAAE;AAIXK,IAAAA,eAAe,EAAE,OAJN;AAKXG,IAAAA,KAAK,EAAE,OALI;AAMXC,IAAAA,QAAQ,EAAE,EANC;AAOXC,IAAAA,gBAAgB,EAAE,EAPP;AAQXC,IAAAA,cAAc,EAAE,EARL;AASXE,IAAAA,WAAW,EAAE,OATF;AAUTC,IAAAA,WAAW,EAAE,CAVJ;AAWXC,IAAAA,iBAAiB,EAAE,CAXR;AAYXH,IAAAA,YAAY,EAAE;AAZH,GAdgB;AA4B/BI,EAAAA,eAAe,EAAE;AACbR,IAAAA,KAAK,EAAE,OADM;AAEbC,IAAAA,QAAQ,EAAE,EAFG;AAGbC,IAAAA,gBAAgB,EAAE,EAHL;AAIbC,IAAAA,cAAc,EAAE,EAJH;AAKbC,IAAAA,YAAY,EAAE;AALD,GA5Bc;AAmC/Bf,EAAAA,OAAO,EAAE;AACLQ,IAAAA,eAAe,EAAE,sBADZ;AAEHY,IAAAA,MAAM,EAAE,EAFL;AAGHC,IAAAA,KAAK,EAAE,GAHJ;AAIHC,IAAAA,SAAS,EAAE,EAJR;AAKHC,IAAAA,YAAY,EAAE,EALX;AAMHR,IAAAA,YAAY,EAAE,CANX;AAOHC,IAAAA,WAAW,EAAE,OAPV;AAQHC,IAAAA,WAAW,EAAE,CARV;AASHO,IAAAA,OAAO,EAAE;AATN,GAnCsB;AA8C/B5B,EAAAA,KAAK,EAAE;AACHe,IAAAA,KAAK,EAAE,OADJ;AAEHC,IAAAA,QAAQ,EAAE,EAFP;AAIHC,IAAAA,gBAAgB,EAAE,EAJf;AAKHC,IAAAA,cAAc,EAAE,EALb;AAMHU,IAAAA,OAAO,EAAE,CANN;AAOHN,IAAAA,iBAAiB,EAAE,EAPhB;AAQHH,IAAAA,YAAY,EAAE;AARX;AA9CwB,CAAlB,CAAf","sourcesContent":["import 'react-native-gesture-handler'\nimport { useForm, Controller } from 'react-hook-form'\nimport React, { useEffect, useState, Component } from 'react'\nimport { StyleSheet, Button, Text, View, Alert, TextInput, TouchableOpacity, FlatList} from 'react-native'\n\n//Signup screen\nexport function SignupScreen ({ navigation }) {\n    // useForm allows us to validate inputs and build forms\n    const {control, handleSubmit, setError, errors} = useForm( { criteriaMode: 'all' })\n    const usernameInputRef = React.useRef()\n    const passwordInputRef = React.useRef()\n    const emailInputRef = React.useRef()\n    \n    const onSubmit = async (data) => { \n      // Once handleSubmit validates the inputs in onPress in button, this code is executed\n      const json = JSON.parse(JSON.stringify(data))\n      const username = json[\"username\"]\n      const password = json[\"password\"]\n      const email = json[\"email\"]\n      const newUser = {username, password, email}\n      console.log(JSON.stringify(newUser))\n      const response = await fetch(\"http://localhost:5000/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newUser)\n    }).then((response) => response.json())\n    .then(data => {\n        return data;\n    });\n    if (response.message == \"user created\") {\n      navigation.navigate('Login');\n      alert(`Account created! Please sign in`)\n      //navigation.navigate('Main');\n    } else {\n      alert(`A problem occurred. Please try again`)\n    }\n    console.log(response)\n    \n  }\n  \n  const onError = (errors, e) => console.log(errors, e)\n  \n    return (\n      <View style={styles.container}>\n        <Text style={styles.title}>Create Account</Text>\n  \n        <View>\n          <Text style={styles.label}>Username</Text>\n          <Controller \n            name=\"username\" \n            control={control} \n            rules= {{required: 'This is required'}}\n            defaultValue=''\n            render={(props) => \n              <TextInput {...props} \n                autoCapitalize=\"none\"\n                style={styles.textbox}\n                onChangeText={(value) => {\n                  props.onChange(value)\n                }}\n                ref={usernameInputRef}\n              />\n            }\n          />\n        </View>\n        <View>\n          <Text style={styles.label}>Password</Text>\n          <Controller \n            name=\"password\" \n            control={control} \n            rules= {{required: 'This is required'}}\n            defaultValue=''\n            render={(props) => \n              <TextInput {...props} \n                secureTextEntry={true}\n                style={styles.textbox}\n                onChangeText={(value) => {\n                  props.onChange(value)\n                }}\n                ref={passwordInputRef}\n              />\n            }\n          />\n        </View>\n        <View>\n          <Text style={styles.label}>Email</Text>\n          <Controller \n            name=\"email\" \n            control={control} \n            rules= {{required: 'This is required'}}\n            defaultValue=''\n            render={(props) => \n              <TextInput {...props} \n                autoCapitalize=\"none\"\n                secureTextEntry={false}\n                style={styles.textbox}\n                onChangeText={(value) => {\n                  props.onChange(value)\n                }}\n                ref={emailInputRef}\n              />\n            }\n          />\n        </View>\n        <View>\n          <TouchableOpacity \n            // handleSubmit validates inputs before calling onSubmit\n            onPress={handleSubmit(onSubmit, onError)}\n            // onPress={() => navigation.navigate('Main')}\n            style={styles.buttonSpecial}>\n            <Text style={styles.button}>Sign up</Text>    \n          </TouchableOpacity>\n        </View>\n      </View>\n    )\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#66cc99',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    button: {\n        color: 'black',\n        fontSize: 20,\n        marginHorizontal: 10,\n        marginVertical: 10,\n        borderRadius: 10\n    },\n    buttonSpecial: { //Currently identical to buttonBasic\n        //backgroundColor: '#8ebce7',\n        //backgroundColor: '#94bfe7',\n        //backgroundColor: '#072A42',\n        backgroundColor: 'white',\n        color: 'white',\n        fontSize: 20,\n        marginHorizontal: 10,\n        marginVertical: 15,\n        borderColor: 'black',\n          borderWidth: 1,\n        paddingHorizontal: 5,\n        borderRadius: 7\n    },\n    buttonWhiteText: {\n        color: 'white',\n        fontSize: 20,\n        marginHorizontal: 10,\n        marginVertical: 10,\n        borderRadius: 5\n    },\n    textbox: {\n        backgroundColor: 'rgba(255,255,255,.5)',\n          height: 40,\n          width: 200,\n          marginTop: 10,\n          marginBottom: 20,\n          borderRadius: 5,\n          borderColor: 'white',\n          borderWidth: 1,\n          padding: 5\n    },\n    title: {\n        color: 'black',\n        fontSize: 30,\n        // backgroundColor: 'white',\n        marginHorizontal: 15,\n        marginVertical: 15,\n        padding: 7,\n        paddingHorizontal: 20,\n        borderRadius: 5\n    },\n})"]},"metadata":{},"sourceType":"module"}