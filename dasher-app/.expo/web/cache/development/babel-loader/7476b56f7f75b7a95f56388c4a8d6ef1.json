{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/susannahbennett/Dasher/dasher-app/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport { useForm, Controller } from 'react-hook-form';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { Stopwatch, Timer } from 'react-native-stopwatch-timer';\nimport { NavigationContainer, ThemeProvider } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nexport default function App() {\n  return React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 2\n    }\n  }, React.createElement(Stack.Navigator, {\n    initialRouteName: \"Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Login\",\n    component: LoginScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Main\",\n    component: MainScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Recommendations\",\n    component: RecommendScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"RecordDrive\",\n    component: RecordDriveScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Statistics\",\n    component: StatisticsScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  })));\n}\nvar Stack = createStackNavigator();\n\nfunction LoginScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useForm = useForm({\n    criteriaMode: 'all'\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      setError = _useForm.setError,\n      errors = _useForm.errors;\n\n  var usernameInputRef = React.useRef();\n  var passwordInputRef = React.useRef();\n\n  var onSubmit = function onSubmit(data) {\n    var json, username, password, user, response;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            json = JSON.parse(JSON.stringify(data));\n            username = json[\"username\"];\n            password = json[\"password\"];\n            user = {\n              username: username,\n              password: password\n            };\n            console.log(JSON.stringify(user));\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fetch(\"http://127.0.0.1:5000/login\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(user)\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return data;\n            }));\n\n          case 7:\n            response = _context.sent;\n\n            if (response.message == \"login∆ís successfull\") {\n              navigation.navigate('Main');\n            } else {}\n\n            console.log(response);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onError = function onError(errors, e) {\n    return console.log(errors, e);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Welcome!\"), React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"Username\"), React.createElement(Controller, {\n    name: \"username\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: usernameInputRef,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Password\"), React.createElement(Controller, {\n    name: \"password\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        secureTextEntry: true,\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: passwordInputRef,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    color: \"black\",\n    title: \"Log In\",\n    onPress: handleSubmit(onSubmit, onError),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction MainScreen(_ref2) {\n  var navigation = _ref2.navigation;\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, \"Main Menu\"), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate('Recommendations');\n    },\n    style: {\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"Get recommendation\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate('RecordDrive');\n    },\n    style: {\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, \"Record a new drive\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate('Statistics');\n    },\n    style: {\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, \"View statistics\")), React.createElement(TouchableOpacity, {\n    style: {\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, \"View/edit past drives\")));\n}\n\nfunction RecommendScreen(_ref3) {\n  var _this2 = this;\n\n  var navigation = _ref3.navigation;\n\n  var _useForm2 = useForm(),\n      control = _useForm2.control,\n      handleSubmit = _useForm2.handleSubmit,\n      errors = _useForm2.errors;\n\n  var restaurantInputRef = React.useRef();\n  var distanceInputRef = React.useRef();\n  var payInputRef = React.useRef();\n\n  var onSubmit = function onSubmit(data) {\n    var json, restaurant, distance, pay, drive, response, prediction, message;\n    return _regeneratorRuntime.async(function onSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            json = JSON.parse(JSON.stringify(data));\n            restaurant = json[\"restaurant\"];\n            distance = json[\"distance\"];\n            pay = json[\"pay\"];\n            drive = {\n              restaurant: restaurant,\n              distance: distance,\n              pay: pay\n            };\n            console.log(drive);\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(fetch(\"http://127.0.0.1:5000/get_recommendation\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(drive)\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return data;\n            }));\n\n          case 8:\n            response = _context2.sent;\n            prediction = response.message.prediction;\n            message = response.message.message;\n            console.log(\"message: \" + message + \", prediction: \" + prediction);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"Get Recommendation!\"), React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, \"Restaurant\"), React.createElement(Controller, {\n    name: \"restaurant\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: restaurantInputRef,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, \"Distance\"), React.createElement(Controller, {\n    name: \"distance\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: distanceInputRef,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, \"Pay\"), React.createElement(Controller, {\n    name: \"pay\",\n    control: control,\n    rules: {\n      required: 'This is required'\n    },\n    defaultValue: \"\",\n    render: function render(props) {\n      return React.createElement(TextInput, _extends({}, props, {\n        style: styles.textbox,\n        onChangeText: function onChangeText(value) {\n          props.onChange(value);\n        },\n        ref: payInputRef,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    color: \"black\",\n    title: \"Get Recommendation\",\n    onPress: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction RecordDriveScreen(_ref4) {\n  var navigation = _ref4.navigation;\n}\n\nfunction StatisticsScreen(_ref5) {\n  var navigation = _ref5.navigation;\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }\n  }, \"Statistics\"));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1ddf6e',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    color: 'black',\n    fontSize: 30,\n    marginHorizontal: 15,\n    marginVertical: 20,\n    padding: 7,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  },\n  button: {\n    color: 'black',\n    fontSize: 20,\n    marginHorizontal: 10,\n    marginVertical: 10,\n    borderRadius: 5\n  },\n  textbox: {\n    backgroundColor: 'white',\n    height: 40,\n    width: 200,\n    marginTop: 0,\n    marginBottom: 20,\n    borderRadius: 5,\n    borderColor: 'white',\n    borderWidth: 1,\n    padding: 5\n  },\n  text: {\n    fontSize: 20,\n    color: 'black',\n    margin: 10,\n    alignContent: 'center'\n  },\n  time: {\n    fontWeight: 'bold',\n    fontSize: 80,\n    color: '#000',\n    alignContent: 'center'\n  },\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    padding: 10,\n    width: 100,\n    borderRadius: 4\n  },\n  buttonText: {\n    fontSize: 20,\n    marginTop: 10\n  }\n});","map":{"version":3,"sources":["/Users/susannahbennett/Dasher/dasher-app/App.js"],"names":["useForm","Controller","StatusBar","React","useEffect","useState","Stopwatch","Timer","NavigationContainer","ThemeProvider","createStackNavigator","App","LoginScreen","MainScreen","RecommendScreen","RecordDriveScreen","StatisticsScreen","Stack","navigation","criteriaMode","control","handleSubmit","setError","errors","usernameInputRef","useRef","passwordInputRef","onSubmit","data","json","JSON","parse","stringify","username","password","user","console","log","fetch","method","headers","body","then","response","message","navigate","onError","e","styles","container","title","label","required","props","textbox","value","onChange","backgroundColor","button","restaurantInputRef","distanceInputRef","payInputRef","restaurant","distance","pay","drive","prediction","StyleSheet","create","flex","alignItems","justifyContent","color","fontSize","marginHorizontal","marginVertical","padding","paddingHorizontal","borderRadius","height","width","marginTop","marginBottom","borderColor","borderWidth","text","margin","alignContent","time","fontWeight","input","buttonText"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler'\nimport { useForm, Controller } from 'react-hook-form'\nimport { StatusBar } from 'expo-status-bar'\nimport React, { useEffect, useState } from 'react'\nimport { StyleSheet, Button, Text, View, Image, Alert, SafeAreaView, TextInput, TouchableOpacity, TouchableHighlight } from 'react-native'\nimport { Stopwatch, Timer } from 'react-native-stopwatch-timer'\nimport { NavigationContainer, ThemeProvider } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\n// import { RecommendForm } from './RecommendForm'\n// import ReactDOM from 'react-dom'\n\nexport default function App () {\n  return (\n\t<NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Login\" component={LoginScreen} />\n        <Stack.Screen name=\"Main\" component={MainScreen} />\n        <Stack.Screen name=\"Recommendations\" component={RecommendScreen} />\n        <Stack.Screen name=\"RecordDrive\" component={RecordDriveScreen} />\n        <Stack.Screen name=\"Statistics\" component={StatisticsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n\nconst Stack = createStackNavigator()\n\n// Login screen\nfunction LoginScreen ({ navigation }) {\n\n  // useForm allows us to validate inputs and build forms\n  const {control, handleSubmit, setError, errors} = useForm( { criteriaMode: 'all' })\n  const usernameInputRef = React.useRef()\n  const passwordInputRef = React.useRef()\n\n  const onSubmit = async (data) => { \n    // Once handleSubmit validates the inputs in onPress in button, this code is executed\n    const json = JSON.parse(JSON.stringify(data))\n    const username = json[\"username\"]\n    const password = json[\"password\"]\n    const user = {username, password}\n    console.log(JSON.stringify(user))\n    const response = await fetch(\"http://127.0.0.1:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    }).then((response) => response.json())\n    .then(data => {\n        return data;\n    });\n    if (response.message == \"login∆ís successfull\") {\n      navigation.navigate('Main');\n    } else {\n      //clear the input fields and display message\n    }\n    console.log(response)\n    \n  }\n\n  const onError = (errors, e) => console.log(errors, e)\n\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text style={styles.title}>Welcome!</Text>\n        <Text style={styles.label}>Username</Text>\n        <Controller \n          name=\"username\" \n          control={control} \n          rules= {{required: 'This is required'}}\n          defaultValue=''\n          render={(props) => \n            <TextInput {...props} \n              \n              style={styles.textbox}\n              onChangeText={(value) => {\n                props.onChange(value)\n              }}\n              ref={usernameInputRef}\n            />\n          }\n        />\n      </View>\n      <View>\n        <Text style={styles.label}>Password</Text>\n        <Controller \n          name=\"password\" \n          control={control} \n          rules= {{required: 'This is required'}}\n          defaultValue=''\n          render={(props) => \n            <TextInput {...props} \n              secureTextEntry={true}\n              style={styles.textbox}\n              onChangeText={(value) => {\n                props.onChange(value)\n              }}\n              ref={passwordInputRef}\n            />\n          }\n        />\n      </View>\n      <View>\n        <Button color=\"black\" title=\"Log In\" \n          // handleSubmit validates inputs before calling onSubmit\n          onPress={handleSubmit(onSubmit, onError)} \n          // onPress={() => navigation.navigate('Main')}\n          />\n      </View>\n    </View>\n  )\n}\n\n// Main menu screen\nfunction MainScreen ({ navigation }) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>\n      Main Menu</Text>\n\n      <TouchableOpacity\n        onPress={() => navigation.navigate('Recommendations')}\n        style={{ backgroundColor: '#fff' }}>\n        <Text style={styles.button}>Get recommendation</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        onPress={() => navigation.navigate('RecordDrive')}\n        style={{ backgroundColor: '#fff' }}>\n        <Text style={styles.button}>Record a new drive</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        onPress={() => navigation.navigate('Statistics')}\n        style={{ backgroundColor: '#fff' }}>\n        <Text style={styles.button}>View statistics</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        // onPress={() => navigation.navigate('Recommendations')}\n        style={{ backgroundColor: '#fff' }}>\n        <Text style={styles.button}>View/edit past drives</Text>\n      </TouchableOpacity>\n\n    </View>\n  )\n}\n\n//GetRecommendations screen\nfunction RecommendScreen({ navigation }) {\n  const { control, handleSubmit, errors } = useForm();\n  const restaurantInputRef = React.useRef()\n  const distanceInputRef = React.useRef()\n  const payInputRef = React.useRef()\n  \n  \n  const onSubmit = async (data) => { \n    // Once handleSubmit validates the inputs in onPress in button, this code is executed\n    const json = JSON.parse(JSON.stringify(data))\n    const restaurant = json[\"restaurant\"]\n    const distance = json[\"distance\"]\n    const pay = json[\"pay\"]\n    const drive = {restaurant, distance, pay}\n    console.log(drive)\n    const response = await fetch(\"http://127.0.0.1:5000/get_recommendation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(drive)\n    }).then((response) => response.json())\n    .then(data => {\n        return data;\n    });\n    const prediction = response.message.prediction\n    const message = response.message.message\n    console.log(\"message: \" + message+ \", prediction: \" + prediction)\n  }\n\n\n  return (\n\n    <View style={styles.container}>\n      <View>\n        <Text style={styles.title}>Get Recommendation!</Text>\n        <Text style={styles.label}>Restaurant</Text>\n        <Controller \n          name=\"restaurant\" \n          control={control} \n          rules= {{required: 'This is required'}}\n          defaultValue=''\n          render={(props) => \n            <TextInput {...props} \n              \n              style={styles.textbox}\n              onChangeText={(value) => {\n                props.onChange(value)\n              }}\n              ref={restaurantInputRef}\n            />\n          }\n        />\n      </View>\n      <View>\n        <Text style={styles.label}>Distance</Text>\n        <Controller \n          name=\"distance\" \n          control={control} \n          rules= {{required: 'This is required'}}\n          defaultValue=''\n          render={(props) => \n            <TextInput {...props} \n              \n              style={styles.textbox}\n              onChangeText={(value) => {\n                props.onChange(value)\n              }} \n              ref={distanceInputRef}\n            />\n          }\n        />\n      </View>\n      <View>\n        <Text style={styles.label}>Pay</Text>\n        <Controller \n          name=\"pay\" \n          control={control} \n          rules= {{required: 'This is required'}}\n          defaultValue=''\n          render={(props) => \n            <TextInput {...props} \n              \n              style={styles.textbox}\n              onChangeText={(value) => {\n                props.onChange(value)\n              }} \n              ref={payInputRef}\n            />\n          }\n        />\n      </View>\n      <View>\n        <Button color=\"black\" title=\"Get Recommendation\" \n          // handleSubmit validates inputs before calling onSubmit\n          onPress={handleSubmit(onSubmit)} \n          // onPress={() => navigation.navigate('Main')}\n          />\n      </View>\n    </View>\n    \n  )\n}\n\n// RecordDrive screen\nfunction RecordDriveScreen ({ navigation }) {\n  /** \n  const stopwatch = () => {\n    const [isTimerStart, setIsTimerStart] = useState(false);\n    const [isStopwatchStart, setIsStopwatchStart] = useState(false);\n    const [timerDuration, setTimerDuration] = useState(90000);\n    const [resetTimer, setResetTimer] = useState(false);\n    const [resetStopwatch, setResetStopwatch] = useState(false);\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.sectionStyle}>\n        <Text style={styles.title}>\n        Record Drive</Text>\n\n        <Text style = {styles.text}>Time</Text>\n        <Text style = {styles.time}>00:00:00</Text>\n        <Stopwatch\n          laps msecs start ={isStopwatchStart}\n          reset = {resetStopwatch}\n          options={options}\n          getTime={(time) => {\n            console.log(time)\n          }}\n        />\n        <TouchableHighlight\n          onPress={ () => {\n            setIsStopwatchStart(!isStopwatchStart)\n            setResetStopwatch(false)\n          }}>\n          <Text style={styles.buttonText}>\n            {!isStopwatchStart ? 'START' : 'STOP'}\n          </Text>  \n        </TouchableHighlight>\n        <TouchableHighlight\n          onPress={ () => {\n            setIsStopwatchStart(false)\n            setResetStopwatch(true)\n          }}>\n          <Text style={styles.buttonText}>RESET</Text>\n        </TouchableHighlight>\n      </View>\n      <View style={styles.sectionStyle}>\n        <Timer\n          totalDuration={timerDuration}\n          msecs start = {isTimerStart}\n          reset = {resetTimer}\n          options = {options}\n          // For calling a function on finish\n          handleFinish = { () => {}}\n          getTime = {(time) => {\n            console.log(time)\n          }}\n        />\n        <TouchableHighlight\n          onPress = { () => {\n            setIsTimerStart(!isTimerStart)\n            setResetTimer(false)\n          }}>\n          <Text style={styles.buttonText}>\n            {!isTimerStart ? 'START' : 'STOP'}\n          </Text>\n        </TouchableHighlight>\n        <TouchableHighlight\n          onPress={ () => {\n            setIsTimerStart(false)\n            setResetTimer(true)\n          }}>\n          <Text style={styles.buttonText}>RESET</Text>\n        </TouchableHighlight>\n      </View>\n      <Image source={{ uri: 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b4/1D_line.svg/2000px-1D_line.svg.png' }}\n        style={{ width: 400, height: 30 }} />\n      <Text style = { styles.text }>Press the record button to start your drive!</Text>\n      <StatusBar style=\"auto\" />\n\n      <TouchableOpacity style = {styles.button}\n        // onPress={startButton}\n        style={{ backgroundColor: 'white' }}>\n        <Text style={ styles.button}>Start Recording</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity style = {styles.button}\n        // onPress={saveDrive}\n        style={{ backgroundColor: 'white' }}>\n        <Text style={ styles.button}>Save Drive</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity style = {styles.button}\n        // onPress={deleteDrive}\n        style={{ backgroundColor: 'white' }}>\n        <Text style={ styles.button}>Delete Drive</Text>\n      </TouchableOpacity>\n\n    </View>\n  )\n  */\n}\n\n// Statistics screen\nfunction StatisticsScreen ({ navigation }) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>\n      Statistics</Text>\n\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1ddf6e',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    color: 'black',\n    fontSize: 30,\n    // backgroundColor: 'white',\n    marginHorizontal: 15,\n    marginVertical: 20,\n    padding: 7,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  },\n  button: {\n    color: 'black',\n    fontSize: 20,\n    marginHorizontal: 10,\n    marginVertical: 10,\n    borderRadius: 5\n  },\n  textbox: {\n    // backgroundColor: 'rgba(0,0,0,0.1)',\n    backgroundColor: 'white',\n  \theight: 40,\n  \twidth: 200,\n  \tmarginTop: 0,\n  \tmarginBottom: 20,\n  \tborderRadius: 5,\n  \tborderColor: 'white',\n  \tborderWidth: 1,\n  \tpadding: 5\n  },\n\n  text: {\n    fontSize: 20,\n    color: 'black',\n    margin: 10,\n    alignContent: 'center'\n  },\n  time: {\n    fontWeight: 'bold',\n    fontSize: 80,\n    color: '#000',\n    alignContent: 'center',\n  },\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    padding: 10,\n    width: 100,\n    borderRadius: 4,\n  },\n  buttonText: {\n    fontSize: 20,\n    marginTop: 10,\n  },\n});\n\n    /**\n    <View style={styles.container}>\n      <Text style={styles.title}>\n      Welcome to Dasher!</Text>\n\n      <TextInput\n      style={styles.textbox}\n      placeholder = \"Username\" placeholderTextColor = 'rgba(0,0,0,0.5)'\n      onChangeText = {(text) => setUsername(text)}\n      />\n\n      <TextInput\n      secureTextEntry={true}\n      style={styles.textbox}\n      placeholder = \"Password\" placeholderTextColor = 'rgba(0,0,0,0.5)'\n      />\n\n      <TouchableOpacity\n        onPress={() => navigation.navigate('Main')\n        style={{ backgroundColor: '#fff' }}>\n        <Text style={styles.button}>Login</Text>\n        \n      </TouchableOpacity>\n\n      <StatusBar style=\"auto\" />\n    </View>\n    */"]},"metadata":{},"sourceType":"module"}