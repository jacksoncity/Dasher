{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/susannahbennett/Dasher/dasher-app/node_modules/react-native-progress-timer/Timer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport * as moment from 'moment';\n\nrequire('moment-duration-format');\n\nimport * as Progress from 'react-native-progress';\nimport timer from 'react-native-timer';\n\nvar Timer = function (_Component) {\n  _inherits(Timer, _Component);\n\n  var _super = _createSuper(Timer);\n\n  function Timer(props) {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      counter: 0,\n      originalCounter: 0,\n      initialState: true,\n      progress: 0,\n      play: true,\n      pause: false,\n      stop: true,\n      resume: false\n    };\n    _this.defaultStyles = {\n      view: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        margin: 10\n      },\n      highlight: {\n        backgroundColor: '#ffffff'\n      },\n      play: {\n        underlayColor: '#ffffff',\n        borderColor: '#d9dcdd',\n        textStyle: {\n          color: '#000000'\n        },\n        style: {\n          backgroundColor: '#ffffff'\n        }\n      },\n      cancel: {\n        underlayColor: '#ffffff',\n        borderColor: '#d9dcdd',\n        textStyle: {\n          color: '#000000'\n        },\n        style: {\n          backgroundColor: '#ffffff'\n        }\n      }\n    };\n    _this.tick = _this.tick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"tick\",\n    value: function tick() {\n      var _this2 = this;\n\n      if (this.state.initialState) {\n        this.setState({\n          initialState: false,\n          counter: this.state.interval,\n          originalCounter: this.state.interval,\n          play: false,\n          stop: !this.state.stop,\n          pause: true,\n          resume: false\n        });\n      }\n\n      if (this.state.counter <= 0) {\n        this.setState({\n          counter: 0,\n          progress: 0,\n          play: true,\n          pause: false,\n          resume: false\n        });\n        this.releaseResources();\n      } else {\n        this.setState({\n          counter: this.state.counter - 1,\n          progress: 1 - this.state.counter / this.state.originalCounter\n        });\n        timer.setInterval(this, 'tick', function () {\n          return _this2.tick();\n        }, 1000);\n      }\n    }\n  }, {\n    key: \"_displayText\",\n    value: function _displayText() {\n      return moment.duration(this.state.counter, 'seconds').format('hh:mm:ss', {\n        trim: false\n      });\n    }\n  }, {\n    key: \"_play\",\n    value: function _play() {\n      var _this3 = this;\n\n      if (this.state.play) {\n        this.setState({\n          initialState: true,\n          interval: this.props.remainingTime,\n          play: false,\n          pause: true,\n          resume: false\n        });\n      } else if (this.state.pause) {\n        this.releaseResources();\n        this.setState({\n          counter: this.state.counter,\n          originalCounter: this.state.originalCounter,\n          progress: this.state.progress,\n          play: false,\n          pause: false,\n          resume: true\n        });\n        return;\n      } else if (this.state.resume) {\n        this.setState({\n          counter: this.state.counter,\n          originalCounter: this.state.originalCounter,\n          progress: this.state.progress,\n          play: false,\n          pause: true,\n          resume: false\n        });\n      }\n\n      timer.setInterval(this, 'tick', function () {\n        return _this3.tick();\n      }, 1000);\n    }\n  }, {\n    key: \"_cancel\",\n    value: function _cancel() {\n      this.releaseResources();\n    }\n  }, {\n    key: \"_showActionText\",\n    value: function _showActionText() {\n      if (this.state.pause) return 'Pause';else if (this.state.resume) return 'Resume';else return 'Start';\n    }\n  }, {\n    key: \"releaseResources\",\n    value: function releaseResources() {\n      try {\n        timer.clearTimeout(this);\n        timer.clearInterval(this);\n        timer.cancelAnimationFrame(this);\n        this.setState({\n          counter: 0,\n          originalCounter: 0,\n          progress: 0,\n          pause: false,\n          resume: false\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props = this.props,\n          remainingTime = _this$props.remainingTime,\n          _this$props$options = _this$props.options,\n          options = _this$props$options === void 0 ? options == null ? this.defaultStyles : options : _this$props$options,\n          animated = _this$props.animated,\n          borderColor = _this$props.borderColor,\n          borderWidth = _this$props.borderWidth,\n          color = _this$props.color,\n          children = _this$props.children,\n          direction = _this$props.direction,\n          fill = _this$props.fill,\n          formatText = _this$props.formatText,\n          indeterminate = _this$props.indeterminate,\n          progress = _this$props.progress,\n          rotation = _this$props.rotation,\n          showsText = _this$props.showsText,\n          size = _this$props.size,\n          style = _this$props.style,\n          strokeCap = _this$props.strokeCap,\n          textStyle = _this$props.textStyle,\n          thickness = _this$props.thickness,\n          unfilledColor = _this$props.unfilledColor,\n          endAngle = _this$props.endAngle,\n          allowFontScaling = _this$props.allowFontScaling,\n          restProps = _objectWithoutProperties(_this$props, [\"remainingTime\", \"options\", \"animated\", \"borderColor\", \"borderWidth\", \"color\", \"children\", \"direction\", \"fill\", \"formatText\", \"indeterminate\", \"progress\", \"rotation\", \"showsText\", \"size\", \"style\", \"strokeCap\", \"textStyle\", \"thickness\", \"unfilledColor\", \"endAngle\", \"allowFontScaling\"]);\n\n      return React.createElement(View, {\n        style: options.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: options.view,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }\n      }, React.createElement(Progress.Circle, {\n        animated: animated,\n        borderColor: borderColor,\n        borderWidth: borderWidth,\n        color: color,\n        children: children,\n        direction: direction,\n        fill: fill,\n        formatText: function formatText(progress) {\n          return _this4._displayText(progress);\n        },\n        indeterminate: this.props.indeterminate,\n        progress: this.state.progress,\n        rotation: rotation,\n        showsText: showsText,\n        size: size,\n        style: style,\n        strokeCap: strokeCap,\n        textStyle: textStyle,\n        thickness: thickness,\n        unfilledColor: unfilledColor,\n        endAngle: unfilledColor,\n        allowFontScaling: allowFontScaling,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }\n      })), React.createElement(View, {\n        style: options.view,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }\n      }, React.createElement(TouchableHighlight, {\n        style: options.highlight.style,\n        underlayColor: options.play.underlayColor,\n        activeOpacity: 1,\n        onPress: function onPress() {\n          return _this4._cancel();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }\n      }, React.createElement(Progress.Circle, {\n        textStyle: options.play.textStyle,\n        style: options.play.style,\n        size: 100,\n        showsText: showsText,\n        animated: animated,\n        progress: 0,\n        borderColor: options.play.borderColor,\n        borderWidth: options.play.borderWidth,\n        thickness: options.play.thickness,\n        formatText: function formatText(progress) {\n          return 'Cancel';\n        },\n        indeterminate: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }\n      })), React.createElement(TouchableHighlight, {\n        style: options.highlight.style,\n        activeOpacity: 1,\n        underlayColor: options.cancel.underlayColor,\n        onPress: function onPress() {\n          return _this4._play();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }\n      }, React.createElement(Progress.Circle, {\n        textStyle: options.cancel.textStyle,\n        style: options.cancel.style,\n        size: 100,\n        showsText: showsText,\n        animated: animated,\n        progress: 0,\n        borderColor: options.cancel.borderColor,\n        borderWidth: options.cancel.borderWidth,\n        thickness: options.cancel.thickness,\n        formatText: function formatText(progress) {\n          return _this4._showActionText();\n        },\n        indeterminate: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return Timer;\n}(Component);\n\nexport default Timer;","map":{"version":3,"sources":["/Users/susannahbennett/Dasher/dasher-app/node_modules/react-native-progress-timer/Timer.js"],"names":["React","Component","moment","require","Progress","timer","Timer","props","state","counter","originalCounter","initialState","progress","play","pause","stop","resume","defaultStyles","view","flexDirection","justifyContent","margin","highlight","backgroundColor","underlayColor","borderColor","textStyle","color","style","cancel","tick","bind","setState","interval","releaseResources","setInterval","duration","format","trim","remainingTime","clearTimeout","clearInterval","cancelAnimationFrame","err","console","log","options","animated","borderWidth","children","direction","fill","formatText","indeterminate","rotation","showsText","size","strokeCap","thickness","unfilledColor","endAngle","allowFontScaling","restProps","container","_displayText","_cancel","_play","_showActionText"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n    View,\n    TouchableHighlight\n} from 'react-native'\nimport * as moment from 'moment';\nrequire('moment-duration-format')\nimport * as Progress from 'react-native-progress';\nimport timer from 'react-native-timer';\n\nclass Timer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n          counter: 0,\n          originalCounter: 0,\n          initialState: true,\n          progress:0,\n          play: true,\n          pause: false,\n          stop: true,\n          resume: false,\n        };\n        this.defaultStyles = {\n            view: {\n                flexDirection: 'row', \n                justifyContent: 'space-between', \n                margin: 10\n              },\n              highlight: {\n                backgroundColor: '#ffffff'\n              },\n              play: {\n                underlayColor: '#ffffff',\n                borderColor: '#d9dcdd',\n                textStyle:{\n                  color: '#000000'\n                },\n                style: {\n                  backgroundColor: '#ffffff'\n                }\n              },\n              cancel: {\n                underlayColor: '#ffffff',\n                borderColor: '#d9dcdd',\n                textStyle:{\n                  color: '#000000'\n                },\n                style: {\n                  backgroundColor: '#ffffff'\n                }\n              }\n          };\n        this.tick = this.tick.bind(this);\n    }\n\n    tick() {  \n        if(this.state.initialState) {\n          this.setState({ \n            initialState: false,\n            counter: this.state.interval, \n            originalCounter: this.state.interval,\n            play: false, \n            stop: !this.state.stop, \n            pause: true,\n            resume: false\n          });\n        }\n\n        if(this.state.counter <= 0) {\n            this.setState({ \n                counter: 0,\n                progress: 0,\n                play: true,\n                pause: false,\n                resume: false\n            });\n            this.releaseResources();\n        } else {\n            this.setState({ \n                counter: this.state.counter - 1,\n                progress: 1 - this.state.counter/this.state.originalCounter\n            });\n\n            timer.setInterval(this, 'tick', () => this.tick(), 1000);\n        }  \n            \n    }\n\n    _displayText(){\n        return moment.duration(this.state.counter, 'seconds').format('hh:mm:ss', { trim: false });\n    }\n\n    _play(){\n        if(this.state.play){\n            //this._stop();\n            this.setState({\n                initialState: true,\n                interval: this.props.remainingTime,\n                play: false,\n                pause: true,\n                resume: false\n              })\n        } else if(this.state.pause){\n            this.releaseResources()\n            this.setState({\n                counter: this.state.counter,\n                originalCounter: this.state.originalCounter,\n                progress: this.state.progress,\n                play: false,\n                pause: false,\n                resume: true\n              })\n            return;\n        } else if(this.state.resume){\n            this.setState({\n                counter: this.state.counter,\n                originalCounter: this.state.originalCounter,\n                progress: this.state.progress,\n                play: false,\n                pause: true,\n                resume: false\n              })\n        }\n\n        timer.setInterval(this, 'tick', () => this.tick(), 1000);\n    }\n\n    _cancel(){\n        this.releaseResources()\n    }\n\n    _showActionText(){\n        if(this.state.pause)\n            return 'Pause'\n        else if(this.state.resume)\n            return 'Resume'\n        else \n            return 'Start'\n    }\n\n    releaseResources() {\n        try{\n            timer.clearTimeout(this);\n            timer.clearInterval(this);\n            timer.cancelAnimationFrame(this);\n            this.setState({\n            counter: 0,\n                originalCounter: 0,\n                progress: 0,\n                pause: false,\n                resume: false,\n            })\n        }catch(err){console.log(err)}\n    }\n\n    render() {\n        const {\n            remainingTime,\n            options = (options==null) ? this.defaultStyles : options,\n            animated,\n            borderColor,\n            borderWidth,\n            color,\n            children,\n            direction,\n            fill,\n            formatText,\n            indeterminate,\n            progress,\n            rotation,\n            showsText,\n            size,\n            style,\n            strokeCap,\n            textStyle,\n            thickness,\n            unfilledColor,\n            endAngle,\n            allowFontScaling,\n            ...restProps\n          } = this.props;\n\n        return (\n            <View style={options.container}>\n              <View style={options.view}>\n                <Progress.Circle\n                    animated={animated}\n                    borderColor= {borderColor}\n                    borderWidth= {borderWidth}\n                    color={color}\n                    children={children}\n                    direction={direction}\n                    fill={fill}\n                    formatText={(progress) => this._displayText(progress)}\n                    indeterminate={this.props.indeterminate}\n                    progress={this.state.progress}\n                    rotation={rotation}\n                    showsText={showsText}\n                    size={size}\n                    style={style}\n                    strokeCap={strokeCap}\n                    textStyle={textStyle}\n                    thickness={thickness}\n                    unfilledColor={unfilledColor}\n                    endAngle={unfilledColor}\n                    allowFontScaling={allowFontScaling}\n                  />\n              </View>\n              <View style={options.view}>\n                <TouchableHighlight style={options.highlight.style} underlayColor={options.play.underlayColor} activeOpacity={1} onPress={() => this._cancel()}>\n                        <Progress.Circle\n                            textStyle={options.play.textStyle}\n                            style={options.play.style}\n                            size={100}\n                            showsText={showsText}\n                            animated={animated}\n                            progress={0}\n                            borderColor={options.play.borderColor}\n                            borderWidth={options.play.borderWidth}\n                            thickness={options.play.thickness}\n                            formatText={(progress) => 'Cancel'}\n                            indeterminate={false}\n                        />\n                    </TouchableHighlight>\n                    <TouchableHighlight style={options.highlight.style} activeOpacity={1} underlayColor={options.cancel.underlayColor} onPress={() => this._play()}>\n                        <Progress.Circle\n                            textStyle={options.cancel.textStyle}\n                            style={options.cancel.style}\n                            size={100}\n                            showsText={showsText}\n                            animated={animated}\n                            progress={0}\n                            borderColor={options.cancel.borderColor}\n                            borderWidth={options.cancel.borderWidth}\n                            thickness={options.cancel.thickness}\n                            formatText={(progress) => this._showActionText()}\n                            indeterminate={false}\n                        />\n                    </TouchableHighlight>\n                </View>\n          </View>\n        );\n    }\n}\n\nexport default Timer"]},"metadata":{},"sourceType":"module"}